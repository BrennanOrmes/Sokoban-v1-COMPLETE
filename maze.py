#-------------------------------------------------------------------------------
# Name:        maze
# Purpose:
#
# Author:      Brennan
#
# Created:     26/09/2014
# Copyright:   (c) cnys 2014
# Licence:     <your licence>
#-------------------------------------------------------------------------------
from random import randint
class Maze:
    """ A 2D maze. """

    def __init__(self):
	"""the maze constructorgn
	(none) -> none
    start by declaring attributes"""
        self.maze = [['#','#','#','#','#','#','#','#','#','#','#',],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','^','/',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ','@',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#']]
        self.diamonds = 1
        self.width = 10
        self.height = 12
        self.crates = 1

    def toString(self):
	"""prints out the maze
	(none) -> none"""
        printme = ""
        for i in range (0,len(self.maze)):
            for j in self.maze[i]:
                printme = printme + j
            printme = printme + "\n"
        return printme

    def placeKeeper (self, keeper_char, row, column):
	"""places keeper at a specified row and column in the maze
	(char, int, int) -> none
    >>>placeRat("$", 2, 2)
    NoneType"""
        self.maze[row][column] = keeper_char

    def placeCrate (self, crates_char, row, column):
    	"""places keeper at a specified row and column in the maze
    	(char, int, int) -> none
        >>>placeRat("$", 2, 2)
        NoneType"""
        self.maze[row][column] = crates_char


    def clearAtPos(self, row, col):
        self.maze[row][col] = " "

    def getCharAtPos(self, row, col):
        """This is a very important method as it allows you to check for
        walls, diamonds and crates
        >>>getCharAtPos(0,0)
        '#'"""
        return self.maze[row][col]

    #def eatDiamonds(self):
        #self.diamonds -= 1

    def goToLevel2(self):
        self.maze = [['#','#','#','#','#','#','#','#','#','#','#',],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','^','/',' ','#','#',' ',' ','#','#','#'],
                       ['#',' ',' ',' ','#','@',' ',' ','#','#','#'],
                       ['#',' ',' ',' ','#','#','#','#','#','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#']]

    def goToLevel3(self):
        self.maze = [['#','#','#','#','#','#','#','#','#','#','#',],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ','#','#',' ','#','#','#','#'],
                       ['#','^','/',' ','#',' ',' ','#','#','#','#'],
                       ['#',' ','#',' ','#','@',' ',' ','#','#','#'],
                       ['#',' ','#',' ','#','#','#',' ','#','#','#'],
                       ['#',' ','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#']]

    def goToLevel4(self):
        self.maze = [['#','#','#','#','#','#','#','#','#','#','#',],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ','#','#',' ','#','#','#','#'],
                       ['#','^','/',' ','#',' ',' ','#','#','#','#'],
                       ['#','#','#',' ','#','@',' ',' ','#','#','#'],
                       ['#','#','#',' ','#',' ',' ',' ','#','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#']]

    def goToLevel5(self):
        self.maze = [['#','#','#','#','#','#','#','#','#','#','#',],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#',' ',' ',' ','#','#',' ','#','#','#','#'],
                       ['#','^','/',' ','#','#',' ','#','#','#','#'],
                       ['#','#','#',' ','#','@',' ',' ','#','#','#'],
                       ['#','#','#',' ','#',' ',' ',' ','#','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#',' ',' ',' ',' ',' ',' ','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#'],
                       ['#','#','#','#','#','#','#','#','#','#','#']]


    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

